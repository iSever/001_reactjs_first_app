{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","value_object","id","name","email","CardList","monsters","map","monster","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACJ,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,aAAaC,GAA7C,4BACd,mCAAML,EAAMI,aAAaE,KAAzB,OACA,kCAAKN,EAAMI,aAAaG,MAAxB,YCHKC,G,MAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAC,GAAO,OACvB,cAAC,EAAD,CAAuBP,aAAcO,GAA1BA,EAAQN,WCJlBO,G,YAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CCG,E,kDA7Cb,aAAe,IAAD,8BACZ,gBAoBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IANH,E,gEAaO,IAAD,OAElBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAQnC,IAAD,EAE2BC,KAAKN,MAA/Bd,EAFD,EAECA,SAAUW,EAFX,EAEWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAApB,GAAO,OAC5CA,EAAQL,KAAK0B,cAAcC,SAASb,EAAYY,kBAGpD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAce,KAAKf,eAE5D,cAAC,EAAD,CAAUL,SAAWqB,W,GAxCXI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c8e55234.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css';\n\nexport const Card = (props) => (\n    <div className='card-container'>\n<img alt='monster' src={`https://robohash.org/${props.value_object.id}?set=set2&size=200x200`} />\n        <h2> {props.value_object.name} </h2>\n        <p> {props.value_object.email} </p>\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/card.component';\n// css\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} value_object={monster} />\n        ))}\n    </div>\n)","import React from 'react';\n\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n    className='search'\n    type='search' \n    placeholder={placeholder} \n    onChange={handleChange}\n    />\n)","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    // states\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n\n    // this.handleChange = this.handleChange.bind(this); -> solved with arrow in the function handleChange\n\n  }\n\n  componentDidMount() {\n    // fetch the users from other api\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      // set the response from api to our state monsters\n      .then(users => this.setState({ monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        {/* search bar */}\n        <SearchBox placeholder='Search Monsters' handleChange={this.handleChange} />\n        {/* card lists with monsters */}\n        <CardList monsters={ filteredMonsters }/> \n      </div>\n      \n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}